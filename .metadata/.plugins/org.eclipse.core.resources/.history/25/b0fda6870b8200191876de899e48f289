package webserver;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.InvalidPathException;
import java.util.HashMap;
import java.util.Map;

import javax.print.attribute.standard.RequestingUserName;

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import db.DataBase;
import model.User;
import util.HttpRequestUtils;
import util.HttpRequestUtils.Pair;
import util.IOUtils;

public class RequestHandler extends Thread {
    private static final Logger log = LoggerFactory.getLogger(RequestHandler.class);

    private Socket connection;

    public RequestHandler(Socket connectionSocket) {
        this.connection = connectionSocket;
    }

    public void run() {
        log.debug("New Client Connect! Connected IP : {}, Port : {}", connection.getInetAddress(),
                connection.getPort());

        try (InputStream in = connection.getInputStream(); OutputStream out = connection.getOutputStream()) {
            // TODO 사용자 요청에 대한 처리는 이 곳에 구현하면 된다.
        	DataOutputStream dos = new DataOutputStream(out);
        	BufferedReader br = new BufferedReader(new InputStreamReader(in));
        	byte[] body = null;
        	String line;
        	
        	String cookieCheck = "";
        	
        	Map<String, String> cookieValue1 = HttpRequestUtils.parseCookies("cookie");
        	Map<String, String> cookieValue2 = HttpRequestUtils.parseCookies("cookies");
        	Map<String, String> cookieValue3 = HttpRequestUtils.parseCookies("Cookie");
        	Map<String, String> cookieValue4 = HttpRequestUtils.parseCookies("Cookies");
        	// Map<String, String> cookieValue5 = HttpRequestUtils.parseCookies();
        	System.out.println("cookieValue1: " + cookieValue1);
        	System.out.println("cookieValue2: " + cookieValue2);
        	System.out.println("cookieValue3: " + cookieValue3);
        	System.out.println("cookieValue4: " + cookieValue4);
        	// System.out.println("cookieValue5: " + cookieValue5);
        	
        	int i = 0;
        	String uris = "";
        	String contentLength = "";
        	String length = "";
        	
        	String cookieLogined = "";
    		while (!"".equals(line = br.readLine())) {
    			if (i == 0) {
    				uris += line + " ";
    			}
    			
    			if (line == null) {
    				return;
    			}
    			
    			if (line.indexOf("Cookie") != -1) {
    				System.out.println("쿠쿠쿠키키키: " + line);
    				cookieLogined = 
    			}
    			
				if (line.indexOf("Content-Length") != -1) {
					length = line.substring(line.indexOf(" ") + 1);
				}
    			
    			i++;
    		}
    		
    		String[] test = uris.split(" ");
    		if ("POST".equals(test[0]) && test[1].indexOf("login") != -1) {
    			
    			String queryString = IOUtils.readData(br, Integer.parseInt(length));
    			Map<String, String> userInfo = HttpRequestUtils.parseQueryString(queryString);
    			
    			User user = DataBase.findUserById(userInfo.get("userId"));
    			
    			if (user != null && user.getUserId() != null && user.getUserId() != "") {
    				// TODO::: 쿠키 셋팅
    				test[1] = "/index.html";
    				cookieCheck = "true";
    			} else {
    				test[1] = "/user/login_failed.html";
    				cookieCheck = "false";
    			}
    			
    		}
    		
    		
    		int queryStringIndex = test[1].indexOf("?"); 
    		
    		
    		if (queryStringIndex != -1) {
    			String url = test[1].substring(0, queryStringIndex);
    			String param = test[1].substring(queryStringIndex + 1);
    			System.out.println("url: " + url);
    			System.out.println("param: " + param);
    		
    			if (url.indexOf("create") != -1) {
    				Map<String, String> userInfo = HttpRequestUtils.parseQueryString(param);
    				User user = new User(userInfo.get("userId"),
    						userInfo.get("password"),
    						userInfo.get("name"), 
    						userInfo.get("email"));
    				
    				DataBase.addUser(user);
    			}
    		}
    		
    		
    		
    		
            if (queryStringIndex != -1) {
            	response302Header(dos, "/index.html");
            } else {
            	body = Files.readAllBytes(new File("./webapp" + test[1]).toPath());
            	if ("true".equals(cookieCheck)) {
            		response200HeaderCookie(dos, body.length, true);
            	} else if ("false".equals(cookieCheck)) {
            		response200HeaderCookie(dos, body.length, false);
            	} else {
            		response200Header(dos, body.length);
            	}
            }
            responseBody(dos, body);
        } catch (IOException e) {
            log.error(e.getMessage());
        } catch (InvalidPathException e) {
        	log.error("해당 경로에 적당한 파일이 없네유..... " + e.getMessage());
		}
    }

    private void response200Header(DataOutputStream dos, int lengthOfBodyContent) {
        try {
            dos.writeBytes("HTTP/1.1 200 OK \r\n");
            dos.writeBytes("Content-Type: text/html;charset=utf-8\r\n");
            dos.writeBytes("Content-Length: " + lengthOfBodyContent + "\r\n");
            dos.writeBytes("\r\n");
        } catch (IOException e) {
            log.error(e.getMessage());
        }
    }
    
    private void response200HeaderCookie(DataOutputStream dos, int lengthOfBodyContent, boolean cookie) {
        try {
            dos.writeBytes("HTTP/1.1 200 OK \r\n");
            dos.writeBytes("Content-Type: text/html;charset=utf-8\r\n");
            dos.writeBytes("Content-Length: " + lengthOfBodyContent + "\r\n");
            dos.writeBytes("Set-Cookie: logined=" + cookie+ "\r\n");
            dos.writeBytes("\r\n");
        } catch (IOException e) {
        	log.error("IOEXception0: " + e.getMessage());
        }
    }
    
    
    
    private void response302Header(DataOutputStream dos, String location) {
        try {
        	dos.writeBytes("HTTP/1.1 302 Found \r\n");
        	dos.writeBytes("Location: " + location + "\r\n");
        } catch (IOException e) {
        	log.error("IOEXception1: " + e.getMessage());
        }
    }

    private void responseBody(DataOutputStream dos, byte[] body) {
        try {
            dos.write(body, 0, body.length);
            dos.flush();
        } catch (IOException e) {
            log.error("IOEXception2: " + e.getMessage());
        } catch (NullPointerException e) {
        	log.error("Null 포인트 익셉션..... " + e.getMessage());
        }
    }
}
