# 흙흙흙흙
	1) Service -> ServiceImpl -> Mapper -> mapper.xml 구조
		- 우선 root-context.xml에서 Controller를 제외한 Service 및 Mapper를 scan 하도록 설정한다.
		그리고 servlet-context.xml에서 Controller를 Scan하도록 하는데, 이 때 주의할 점은 Controller, Sevrice,
		ServiceImpl, Mapper를 한 패키지에 두니까 제대로 읽어들이지 못했다. 그리고 무슨 이유 때문인지는 모르겠지만 자꾸 Deployment
		Assembly에서 추가한 ojdbc6.jar가 사라져서 junit으로 hikari DB 테스트가 성공하는데도 서버가 안켜져서 몇 시간 헤맸다...
		Bean 생성과 의존관계에 대한 구체적인 내용은 이 책이 끝나고 토비의 스프링을 읽으면서 공부해야겠다.
		
		- 위 설정이 완료되면 mapper.xml namespace에 Mapper.java 인터페이스를 연동하여 쓰면 된다~
		
		
		
	2) Ajax를 이용해서 받아온 데이터 처리하면서 생긴 삽질
		- 로그인을 하면서 Ajax을 이용해 id/pw 정보를 넘겨주고 boolean 타입으로 응답을 주게 만들었다. 근데 자꾸 원하는 데이터가 나오지 않았다.
		단순히 json 데이터로 넘어오겠구나~ 했는데 넘어온 데이터를 console.log로 찍었을 때 <Boolean>false</Boolean> 으로 데이터가 넘어 왔다.
		xml 방식으로 넘어온 것 인데, 생각을 못하고 저 false를 어떻게 뽑아서 써야 되나 하다가 ajax 요청시 dataType을 json으로 주고서야 원하는 결과를
		받아 처리를 할 수 있었다.
		그리고 xml 방식에서 저 false를 사용하려면 html 태그랑 같다고 생각하고 getElementsByTagName("boolean")[0]를 해서
		.textContent로 뽑아오면 된다. 이거로 두시간이나 잡아 먹었다.
		
		
		
	3) 쿼리 paging 처리
		- 게시판에 게시글을 가져오기 위해  페이징 관련 쿼리를 작성해 보았다.
		ex)
		SELECT 
		  B.*
		FROM
		(
		  SELECT 
		    ROWNUM AS RNUM,
		    BOARD_ID,
		    USER_ID,
		    TITLE,
		    CONTENT,
		    IMAGE,
		    HIT_COUNT,
		    CREATED_DATE
		  FROM
		    BOARD
		) B
		WHERE
		  B.RNUM BETWEEN 1 AND 10;
		
		이렇게 해서 가져 올 수는 있으나, 데이터가 수 백, 수 천만건이면 엄청 느려진다.
		왜냐하면 rownum을 수백만 데이터에 붙이고 그 중에서 1~10에 있는 값을 가져오기 때문이다.
		이것을 나눠서 표현하면 옵티마이저의 힘으로 성능을 좋게 만들 수 있다.
		ex)
		SELECT
		  B.TITLE
		FROM
		  (
		  SELECT 
		    ROWNUM RNUM,
		    A.TITLE
		  FROM
		    (
		    SELECT
		      TITLE
		    FROM  
		      BOARD
		    ) A
		  WHERE
		    ROWNUM <= 20
		  ) B
		WHERE
		  B.RNUM >= 11
		
	
	
	
	4) 외부 경로에 있는 이미지를 프로젝트 내에서 <img> 태그를 통해 읽을 때 !
		- server.xml 설정 (Host 태그 안에 Context를 추가)
		ex) doBase에 있는 주소(하드디스크 주소)를 path에 있는 주소로 사용 하겠다는 것.
		외부 경로 파일 접근이 원래는 안되니까 내부 주소인 것처럼 등록해 버리는 것. 
		<Context docBase="C:/Study/upload" path="/upload" reloadable="true" />
		
		- 그리고 servlet-context.xml에서 <resources mapping="/upload/**" location="/upload" /> 이 태그가 필요한줄 알았는데 없애도 작동한다.... 
	
		- jsp 내부 img 태그 사용
		ex) 
		<img src="/upload/manager/profile/dog.jpg" alt="사진"/>
	
	
	5) 대댓글 삽질!
	- COLUMN 
		- REPLY_ID			// 댓글 ID
		- BOARD_ID			// 게시판 ID
		- PARENT_REPLY_ID 	// 부모 댓글 ID 
			(1번째 댓글 ID 계속 유지 / NULL인 것이 첫 번째 댓글)
		- REPLY_LEVEL 		// 댓글 순서
		- USER_ID				// 댓글 작성자
		- CONTENT 			// 댓글 내용
		- CREATED_DATE 		// 날짜
		
	- 시나리오
		- PARENT_REPLY_ID가 NULL(댓글1)인 것을 가져와서 
		
		
		
		
		