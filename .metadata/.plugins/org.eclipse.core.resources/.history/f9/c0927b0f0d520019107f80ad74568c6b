# 02장

### 2-1 main() 메소드를 활용한 테스트의 문제점
	- 메인 메소드와 테스트 코드를 분리하기 위해 JUnit 등 테스트 라이브러리를 활용하자.
	
### 2-2 JUnit을 활용해 main() 메소드 문제점 극복
	- [이클립스 활용, JUnit 3 버전 사용법](https://youtu.be/vrUGCv80xql)
	- [JUnit 4 버전 사용방법](https://youtu.be/tyZMdwT3rlY)
	

% 테스트 코드 작성 시 어떤 객체를 여러 테스트 코드에서 사용할 경우 멤버 변수로 그 객체를 선언하고 @Before을 이용하여 객체 초기화!
	- @Before 안에 있으면 @RunWith, @Rule에서 초기화된 객체게 접근할 수 있다는 제약사항이 있다.
	@Before 안에 초기화하는 이유는 테스트 코드를 실행하면서 메소드 간의 객체를 공유하여 예상치 못한 값이 나올수 있기 때문이다.
	
	```
	public class CalculatorTest {
		Calculator cal;
	
		@Before
		public void setUp() {
			cal = new Calculator();
		}
		
		@Test
		public void add() {
			assertEquals(9, cal.add(6, 3));
			
		}
		
		@After
		public void teardown() {
			System.out.println("teardown");
		}
	}
	```
	
##### 연습 문제1)
	- 문자열 계산기 요구사항 및 실습 (p.54)
		- 전달하는 문자를 구분자로 구분하여 각 숫자의 합을 구하여 반환 (,)(:)
		- 커스텀 구분자 지정 -> "//"와 "\n" 사이에 위치하는 문자는 커스텀 구분자로 사용
		- 문자열 계싼기에 음수를 전달하는 경우 RuntimeException 예외 처리
```	
// 내가 짠 코드
public int returnNumber(String number) {
		String separate = " ";
		if (number.startsWith("//") && number.indexOf("\n") != -1) {
			System.out.println("11111111111111");
			separate = number.substring(number.lastIndexOf("/") + 1, number.indexOf("\n"));
			number = number.substring(number.indexOf("\n") + 1);
		}
		
		int sum = 0;
		String[] split = number.split(",|:|" + separate);
		
		
		for (String a : split) {
			if (a.indexOf("-") != -1) {
				throw new NegativeNumberException("음수가 들어갈 수 없다.");
			}
			sum += Integer.parseInt(a);
		}
		return sum;
	}

// 45~50 라인의 코드가 지저분하다. 	
```
	