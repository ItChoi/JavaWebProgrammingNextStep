package webserver;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.file.Files;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import db.DataBase;
import model.User;
import util.HttpRequestProcessingUtils;
import util.IOUtils;

public class RequestHandler extends Thread {
    private static final Logger log = LoggerFactory.getLogger(RequestHandler.class);

    private Socket connection;

    public RequestHandler(Socket connectionSocket) {
        this.connection = connectionSocket;
    }

    public void run() {
        log.debug("New Client Connect! Connected IP : {}, Port : {}", connection.getInetAddress(),
                connection.getPort());

        try (InputStream in = connection.getInputStream(); OutputStream out = connection.getOutputStream()) {
        	
        	// test start
        	/*BufferedReader br = new BufferedReader(new InputStreamReader(in));
        	
        	String lineTest = br.readLine();
        	
        	log.info("lineTest: " + lineTest);
        	
        	String[] lineTestArray = lineTest.split(" ");
        	
        	log.info("lineTestArray1: " + lineTestArray[0]);
        	log.info("lineTestArray2: " + lineTestArray[1]);
        	log.info("lineTestArray3: " + lineTestArray[2]);*/
        	
        	/*HttpRequestProcessingUtils hrpu = new HttpRequestProcessingUtils(in);
        	
        	String[] headerInfo = hrpu.getHeaderInfo();
        	Map<String, String> headerDetailInfo = hrpu.getDetailHeaderInfo();
        	
        	log.info("headerInfo1: " + headerInfo[0]);
        	log.info("headerInfo2: " + headerInfo[1]);
        	log.info("headerInfo3: " + headerInfo[2]);*/
        	
        	// test end
        	
        	DataOutputStream dos = new DataOutputStream(out);
        	HttpRequestProcessingUtils hrpu = new HttpRequestProcessingUtils(in);
        	
        	String[] headerInfo = hrpu.getHeaderInfo();
        	Map<String, String> headerDetailInfo = hrpu.getDetailHeaderInfo();
        	
        	String httpMethod = headerInfo[0];
        	String httpUri = headerInfo[1];
        	log.info("test httpUri[0]: " + headerInfo[0]);
        	log.info("test httpUri[1]: " + headerInfo[1]);
        	log.info("test httpUri[2]: " + headerInfo[2]);
        	// String httpVersion = headerInfo[2];
        	
        	Map<String, String> queryString = null;
        	String values = "";
        	
        	byte[] body = null;
        
        	
        	if (httpUri.indexOf("?") != -1) {
        		values = httpUri.substring(httpUri.indexOf("?") + 1);
        		httpUri = httpUri.substring(0, httpUri.indexOf("?"));
        		queryString = hrpu.getQueryStringKeyValue(values, "&");
        		
        		log.info("httpUri get: " + httpUri);
        	}

        	User user = null;
        	boolean loginSuccess = false;
        	
        	if ("post".equals(httpMethod.toLowerCase())) {
        		log.info("post로는 온다.: " + httpUri);
        		values = IOUtils.readData(hrpu.getBr(), Integer.parseInt(headerDetailInfo.get("Content-Length")));
        		queryString = hrpu.getQueryStringKeyValue(values, "&");
        		
        		if ("/user/create".equals(httpUri)) {
        			log.info("uri1::: " + httpUri);
        			httpUri = "/index.html";
        			
        			if (queryString != null) {
        				user = new User(queryString.get("userId"),
        						queryString.get("password"),
        						queryString.get("name"),
        						queryString.get("email"));
        				
        				DataBase.addUser(user);
        				
        				response302header(dos, httpUri);
        			}
        			
        		} else if (httpUri.indexOf("/user/login") != -1) {
        			log.info("uri2::: " + httpUri);
        			if (DataBase.findUserById(queryString.get("userId")) != null & DataBase.findUserById(queryString.get("password")) != null) {
        				// TODO::: 아이디 비번 맞는 것 일땐 정상, 비정상일떈 null이 뜨지만 if문으로 제어할수가없네. 방법 알아보기.
        				String savedUserId = DataBase.findUserById(queryString.get("userId")).getUserId();
        				String savedPassword = DataBase.findUserById(queryString.get("password")).getPassword();
        				
        				if (savedUserId != null & savedPassword != null) {
        					log.info("로그인 성공");
        					httpUri = "index.html";
        					loginSuccess = true;
        				} 
        				
        			 } else {
        				log.info("로그인 실패");
     					loginSuccess = false;
     					httpUri = "/user/login_failed.html";
        			 }
        			
        			body = returnByteBody(httpUri);
    				response200HeaderCookie(dos, body.length, loginSuccess);
        			
        		} else {
        			body = returnByteBody(httpUri);
        			response200Header(dos, body.length);
        			
        		}
        		
        	} else {
        		body = returnByteBody(httpUri); 
        		response200Header(dos, body.length);
        	}
            
            
            if ("/user/create".equals(httpUri)) {
    			response302header(dos, httpUri);
    		} else if(loginSuccess) {

    		} else{
    			response200Header(dos, body.length);
    		}
            
        	log.info("뭐가 null이니1: " + dos);
        	log.info("뭐가 null이니2: " + body);
        	
        	// test start
        	/*byte[] body = Files.readAllBytes(new File("./webapp" + htt[1]).toPath());
        	response200Header(dos, body.length);*/
        	// test end
        	
        	if (body != null) {
        		responseBody(dos, body);
        	}
        } catch (IOException e) {
            log.error(e.getMessage());
        }
    }

    private void response200Header(DataOutputStream dos, int lengthOfBodyContent) {
        try {
            dos.writeBytes("HTTP/1.1 200 OK \r\n");
            dos.writeBytes("Content-Type: text/html;charset=utf-8\r\n");
            dos.writeBytes("Content-Length: " + lengthOfBodyContent + "\r\n");
            dos.writeBytes("\r\n");
        } catch (IOException e) {
            log.error(e.getMessage());
        }
    }
    
    private void response200HeaderCookie(DataOutputStream dos, int lengthOfBodyContent, boolean cookie) {
        try {
            dos.writeBytes("HTTP/1.1 200 OK \r\n");
            dos.writeBytes("Content-Type: text/html;charset=utf-8\r\n");
            dos.writeBytes("Content-Length: " + lengthOfBodyContent + "\r\n");
            dos.writeBytes("Cookie: logined=" + cookie + "\r\n");
            dos.writeBytes("\r\n");
        } catch (IOException e) {
            log.error(e.getMessage());
        }
    }

    private void responseBody(DataOutputStream dos, byte[] body) {
        try {
            dos.write(body, 0, body.length);
            dos.flush();
        } catch (IOException e) {
            log.error(e.getMessage());
        }
    }
    
    private void response302header(DataOutputStream dos, String url) {
    	// HTTP/1.1 302 Found
    	// Location: http://www.iana.org/domains/example/
    	try {
    		log.info("302왔당....");
    		dos.writeBytes("HTTP/1.1 302 Found \r\n");
    		dos.writeBytes("Location: " + url + "\r\n");
    	} catch (IOException e) {
			e.getStackTrace();
		}
    	
    }
    
    
    public byte[] returnByteBody(String httpUri) {
    	byte[] body = null;
    	try {
    		body = Files.readAllBytes(new File("./webapp" + httpUri).toPath());
    	} catch (IOException e) {
    		e.printStackTrace();
		}
    	return body;
    }   
    
}